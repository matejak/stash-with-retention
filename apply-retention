#!/bin/bash

# ARG_POSITIONAL_SINGLE([regexp],[What files to look for in the shortterm directory (grep regexp applied to filename)],['.*'])
# ARG_OPTIONAL_SINGLE([shortterm-time],[s],[Shortterm storage cap],[31])
# ARG_OPTIONAL_SINGLE([longterm-time],[l],[Longterm storage cap],[24])
# ARG_OPTIONAL_SINGLE([longterm-regexp],[r],[Longterm content match (grep regexp applied to filename)],[-01\($\|[^-]\)])
# ARG_HELP([The script assumes that directories 'shortterm' and 'longterm' exist in the working directory. Matching files in shortterm are either deleted or moved to the longterm directory if they match the longterm regexp. The script assures that there the number of files in shortterm and longterm directories won't exceed the given limit.])
# DEFINE_SCRIPT_DIR([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='slrh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_regexp='.*'
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_shortterm_time="31"
_arg_longterm_time="24"
_arg_longterm_regexp="-01\($\|[^-]\)"

print_help ()
{
	printf "%s\n" "The script assumes that directories 'shortterm' and 'longterm' exist in the working directory. Matching files in shortterm are either deleted or moved to the longterm directory if they match the longterm regexp. The script assures that there the number of files in shortterm and longterm directories won't exceed the given limit."
	printf 'Usage: %s [-s|--shortterm-time <arg>] [-l|--longterm-time <arg>] [-r|--longterm-regexp <arg>] [-h|--help] [<regexp>]\n' "$0"
	printf "\t%s\n" "<regexp>: What files to look for in the shortterm directory (grep regexp applied to filename) (default: '"'.*'"')"
	printf "\t%s\n" "-s,--shortterm-time: Shortterm storage cap (default: '"31"')"
	printf "\t%s\n" "-l,--longterm-time: Longterm storage cap (default: '"24"')"
	printf "\t%s\n" "-r,--longterm-regexp: Longterm content match (grep regexp applied to filename) (default: '-01\($\|[^-]\)')"
	printf "\t%s\n" "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--shortterm-time)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_shortterm_time="$2"
				shift
				;;
			--shortterm-time=*)
				_arg_shortterm_time="${_key##--shortterm-time=}"
				;;
			-s*)
				_arg_shortterm_time="${_key##-s}"
				;;
			-l|--longterm-time)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_longterm_time="$2"
				shift
				;;
			--longterm-time=*)
				_arg_longterm_time="${_key##--longterm-time=}"
				;;
			-l*)
				_arg_longterm_time="${_key##-l}"
				;;
			-r|--longterm-regexp)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_longterm_regexp="$2"
				shift
				;;
			--longterm-regexp=*)
				_arg_longterm_regexp="${_key##--longterm-regexp=}"
				;;
			-r*)
				_arg_longterm_regexp="${_key##-r}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	test ${#_positionals[@]} -gt 1 && _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_regexp' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || die "Couldn't determine the script's running directory, which probably matters, bailing out" 2

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

#

source "$script_dir/lib.sh"

args=("$_arg_regexp" "shortterm" "$_arg_shortterm_time" "$_arg_longterm_regexp" "longterm" "$_arg_longterm_time")


handle_directory "${args[@]}"

# ] <-- needed because of Argbash
